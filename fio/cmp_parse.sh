#!/bin/bash

set -e

CURRENT_DIR="$(dirname "$(readlink -f "$0")")"
source $CURRENT_DIR/func.sh

if [ -z "FIRST_VOL_NAME" ]; then
	echo Require the first volume name
	exit 1
fi

if [ -z "SECOND_VOL_NAME" ]; then
	echo Require the second volume name
	exit 1
fi

FIRST_IOPS=${FIRST_VOL_NAME}-iops.json
FIRST_BW=${FIRST_VOL_NAME}-bandwidth.json
FIRST_LAT=${FIRST_VOL_NAME}-latency.json

SECOND_IOPS=${SECOND_VOL_NAME}-iops.json
SECOND_BW=${SECOND_VOL_NAME}-bandwidth.json
SECOND_LAT=${SECOND_VOL_NAME}-latency.json

parse_iops $FIRST_IOPS
FIRST_RAND_READ_IOPS=$RAND_READ_IOPS
FIRST_SYS_CPU_PCT_RAND_READ_IOPS=$SYS_CPU_PCT_RAND_READ_IOPS
FIRST_USR_CPU_PCT_RAND_READ_IOPS=$USR_CPU_PCT_RAND_READ_IOPS
FIRST_RAND_WRITE_IOPS=$RAND_WRITE_IOPS
FIRST_SYS_CPU_PCT_RAND_WRITE_IOPS=$SYS_CPU_PCT_RAND_WRITE_IOPS
FIRST_USR_CPU_PCT_RAND_WRITE_IOPS=$USR_CPU_PCT_RAND_WRITE_IOPS
FIRST_SEQ_READ_IOPS=$SEQ_READ_IOPS
FIRST_SYS_CPU_PCT_SEQ_READ_IOPS=$SYS_CPU_PCT_SEQ_READ_IOPS
FIRST_USR_CPU_PCT_SEQ_READ_IOPS=$USR_CPU_PCT_SEQ_READ_IOPS
FIRST_SEQ_WRITE_IOPS=$SEQ_WRITE_IOPS
FIRST_SYS_CPU_PCT_SEQ_WRITE_IOPS=$SYS_CPU_PCT_SEQ_WRITE_IOPS
FIRST_USR_CPU_PCT_SEQ_WRITE_IOPS=$USR_CPU_PCT_SEQ_WRITE_IOPS

parse_iops $SECOND_IOPS
SECOND_RAND_READ_IOPS=$RAND_READ_IOPS
SECOND_SYS_CPU_PCT_RAND_READ_IOPS=$SYS_CPU_PCT_RAND_READ_IOPS
SECOND_USR_CPU_PCT_RAND_READ_IOPS=$USR_CPU_PCT_RAND_READ_IOPS
SECOND_RAND_WRITE_IOPS=$RAND_WRITE_IOPS
SECOND_SYS_CPU_PCT_RAND_WRITE_IOPS=$SYS_CPU_PCT_RAND_WRITE_IOPS
SECOND_USR_CPU_PCT_RAND_WRITE_IOPS=$USR_CPU_PCT_RAND_WRITE_IOPS
SECOND_SEQ_READ_IOPS=$SEQ_READ_IOPS
SECOND_SYS_CPU_PCT_SEQ_READ_IOPS=$SYS_CPU_PCT_SEQ_READ_IOPS
SECOND_USR_CPU_PCT_SEQ_READ_IOPS=$USR_CPU_PCT_SEQ_READ_IOPS
SECOND_SEQ_WRITE_IOPS=$SEQ_WRITE_IOPS
SECOND_SYS_CPU_PCT_SEQ_WRITE_IOPS=$SYS_CPU_PCT_SEQ_WRITE_IOPS
SECOND_USR_CPU_PCT_SEQ_WRITE_IOPS=$USR_CPU_PCT_SEQ_WRITE_IOPS

calc_cmp_iops

parse_bw $FIRST_BW
FIRST_RAND_READ_BW=$RAND_READ_BW
FIRST_SYS_CPU_PCT_RAND_READ_BW=$SYS_CPU_PCT_RAND_READ_BW
FIRST_USR_CPU_PCT_RAND_READ_BW=$USR_CPU_PCT_RAND_READ_BW
FIRST_RAND_WRITE_BW=$RAND_WRITE_BW
FIRST_SYS_CPU_PCT_RAND_WRITE_BW=$SYS_CPU_PCT_RAND_WRITE_BW
FIRST_USR_CPU_PCT_RAND_WRITE_BW=$USR_CPU_PCT_RAND_WRITE_BW
FIRST_SEQ_READ_BW=$SEQ_READ_BW
FIRST_SYS_CPU_PCT_SEQ_READ_BW=$SYS_CPU_PCT_SEQ_READ_BW
FIRST_USR_CPU_PCT_SEQ_READ_BW=$USR_CPU_PCT_SEQ_READ_BW
FIRST_SEQ_WRITE_BW=$SEQ_WRITE_BW
FIRST_SYS_CPU_PCT_SEQ_WRITE_BW=$SYS_CPU_PCT_SEQ_WRITE_BW
FIRST_USR_CPU_PCT_SEQ_WRITE_BW=$USR_CPU_PCT_SEQ_WRITE_BW

parse_bw $SECOND_BW
SECOND_RAND_READ_BW=$RAND_READ_BW
SECOND_SYS_CPU_PCT_RAND_READ_BW=$SYS_CPU_PCT_RAND_READ_BW
SECOND_USR_CPU_PCT_RAND_READ_BW=$USR_CPU_PCT_RAND_READ_BW
SECOND_RAND_WRITE_BW=$RAND_WRITE_BW
SECOND_SYS_CPU_PCT_RAND_WRITE_BW=$SYS_CPU_PCT_RAND_WRITE_BW
SECOND_USR_CPU_PCT_RAND_WRITE_BW=$USR_CPU_PCT_RAND_WRITE_BW
SECOND_SEQ_READ_BW=$SEQ_READ_BW
SECOND_SYS_CPU_PCT_SEQ_READ_BW=$SYS_CPU_PCT_SEQ_READ_BW
SECOND_USR_CPU_PCT_SEQ_READ_BW=$USR_CPU_PCT_SEQ_READ_BW
SECOND_SEQ_WRITE_BW=$SEQ_WRITE_BW
SECOND_SYS_CPU_PCT_SEQ_WRITE_BW=$SYS_CPU_PCT_SEQ_WRITE_BW
SECOND_USR_CPU_PCT_SEQ_WRITE_BW=$USR_CPU_PCT_SEQ_WRITE_BW

calc_cmp_bw

parse_lat $FIRST_LAT
FIRST_RAND_READ_LAT=$RAND_READ_LAT
FIRST_SYS_CPU_PCT_RAND_READ_LAT=$SYS_CPU_PCT_RAND_READ_LAT
FIRST_USR_CPU_PCT_RAND_READ_LAT=$USR_CPU_PCT_RAND_READ_LAT
FIRST_RAND_WRITE_LAT=$RAND_WRITE_LAT
FIRST_SYS_CPU_PCT_RAND_WRITE_LAT=$SYS_CPU_PCT_RAND_WRITE_LAT
FIRST_USR_CPU_PCT_RAND_WRITE_LAT=$USR_CPU_PCT_RAND_WRITE_LAT
FIRST_SEQ_READ_LAT=$SEQ_READ_LAT
FIRST_SYS_CPU_PCT_SEQ_READ_LAT=$SYS_CPU_PCT_SEQ_READ_LAT
FIRST_USR_CPU_PCT_SEQ_READ_LAT=$USR_CPU_PCT_SEQ_READ_LAT
FIRST_SEQ_WRITE_LAT=$SEQ_WRITE_LAT
FIRST_SYS_CPU_PCT_SEQ_WRITE_LAT=$SYS_CPU_PCT_SEQ_WRITE_LAT
FIRST_USR_CPU_PCT_SEQ_WRITE_LAT=$USR_CPU_PCT_SEQ_WRITE_LAT

parse_lat $SECOND_LAT
SECOND_RAND_READ_LAT=$RAND_READ_LAT
SECOND_SYS_CPU_PCT_RAND_READ_LAT=$SYS_CPU_PCT_RAND_READ_LAT
SECOND_USR_CPU_PCT_RAND_READ_LAT=$USR_CPU_PCT_RAND_READ_LAT
SECOND_RAND_WRITE_LAT=$RAND_WRITE_LAT
SECOND_SYS_CPU_PCT_RAND_WRITE_LAT=$SYS_CPU_PCT_RAND_WRITE_LAT
SECOND_USR_CPU_PCT_RAND_WRITE_LAT=$USR_CPU_PCT_RAND_WRITE_LAT
SECOND_SEQ_READ_LAT=$SEQ_READ_LAT
SECOND_SYS_CPU_PCT_SEQ_READ_LAT=$SYS_CPU_PCT_SEQ_READ_LAT
SECOND_USR_CPU_PCT_SEQ_READ_LAT=$USR_CPU_PCT_SEQ_READ_LAT
SECOND_SEQ_WRITE_LAT=$SEQ_WRITE_LAT
SECOND_SYS_CPU_PCT_SEQ_WRITE_LAT=$SYS_CPU_PCT_SEQ_WRITE_LAT
SECOND_USR_CPU_PCT_SEQ_WRITE_LAT=$USR_CPU_PCT_SEQ_WRITE_LAT

calc_cmp_lat

RESULT=${FIRST_VOL_NAME}_vs_${SECOND_VOL_NAME}.summary

QUICK_MODE_TEXT="QUICK MODE: DISABLED"
if [ -n "$QUICK_MODE" ]; then
	QUICK_MODE_TEXT="QUICK MODE ENABLED"
fi

SIZE_TEXT="SIZE: 10g"
if [ -n "$SIZE" ]; then
	SIZE_TEXT="SIZE: $SIZE"
fi

SUMMARY="
================================
FIO Benchmark Comparsion Summary
For: $FIRST_VOL_NAME vs $SECOND_VOL_NAME
$SIZE_TEXT
$QUICK_MODE_TEXT
================================
"

printf -v header "$CMP_FMT" \
	"" $FIRST_VOL_NAME "vs" $SECOND_VOL_NAME ":" "Change"
SUMMARY+=$header

printf -v cxt "IOPS\n$CMP_FMT$CMP_FMT$CMP_FMT$CMP_FMT\n" \
        "Random Rread:" \
        "$(commaize $FIRST_RAND_READ_IOPS) (sys/usr cpu: $FIRST_SYS_CPU_PCT_RAND_READ_IOPS% / $FIRST_USR_CPU_PCT_RAND_READ_IOPS%)" \
        "vs" \
        "$(commaize $SECOND_RAND_READ_IOPS) (sys/usr cpu: $SECOND_SYS_CPU_PCT_RAND_READ_IOPS% / $SECOND_USR_CPU_PCT_RAND_READ_IOPS%)" \
        ":" \
        "$CMP_RAND_READ_IOPS (sys/usr cpu: $CMP_SYS_CPU_PCT_RAND_READ_IOPS% / $CMP_USR_CPU_PCT_RAND_READ_IOPS%)" \
        "Random Write:" \
        "$(commaize $FIRST_RAND_WRITE_IOPS) (sys/usr cpu: $FIRST_SYS_CPU_PCT_RAND_WRITE_IOPS% / $FIRST_USR_CPU_PCT_RAND_WRITE_IOPS%)" \
        "vs" \
        "$(commaize $SECOND_RAND_WRITE_IOPS) (sys/usr cpu: $SECOND_SYS_CPU_PCT_RAND_WRITE_IOPS% / $SECOND_USR_CPU_PCT_RAND_WRITE_IOPS%)" \
        ":" \
        "$CMP_RAND_WRITE_IOPS (sys/usr cpu: $CMP_SYS_CPU_PCT_RAND_WRITE_IOPS% / $CMP_USR_CPU_PCT_RAND_WRITE_IOPS%)" \
        "Sequential Read:" \
        "$(commaize $FIRST_SEQ_READ_IOPS) (sys/usr cpu: $FIRST_SYS_CPU_PCT_SEQ_READ_IOPS% / $FIRST_USR_CPU_PCT_SEQ_READ_IOPS%)" \
        "vs" \
        "$(commaize $SECOND_SEQ_READ_IOPS) (sys/usr cpu: $SECOND_SYS_CPU_PCT_SEQ_READ_IOPS% / $SECOND_USR_CPU_PCT_SEQ_READ_IOPS%)" \
        ":" \
        "$CMP_SEQ_READ_IOPS (sys/usr cpu: $CMP_SYS_CPU_PCT_SEQ_READ_IOPS% / $CMP_USR_CPU_PCT_SEQ_READ_IOPS%)" \
        "Sequential Write:" \
        "$(commaize $FIRST_SEQ_WRITE_IOPS) (sys/usr cpu: $FIRST_SYS_CPU_PCT_SEQ_WRITE_IOPS% / $FIRST_USR_CPU_PCT_SEQ_WRITE_IOPS%)" \
        "vs" \
        "$(commaize $SECOND_SEQ_WRITE_IOPS) (sys/usr cpu: $SECOND_SYS_CPU_PCT_SEQ_WRITE_IOPS% / $SECOND_USR_CPU_PCT_SEQ_WRITE_IOPS%)" \
        ":" \
        "$CMP_SEQ_WRITE_IOPS (sys/usr cpu: $CMP_SYS_CPU_PCT_SEQ_WRITE_IOPS% / $CMP_USR_CPU_PCT_SEQ_WRITE_IOPS%)"
SUMMARY+=$cxt

printf -v cxt "Bandwidth in KiB/sec\n$CMP_FMT$CMP_FMT$CMP_FMT$CMP_FMT\n" \
        "Random Rread:" \
        "$(commaize $FIRST_RAND_READ_BW) (sys/usr cpu: $FIRST_SYS_CPU_PCT_RAND_READ_BW% / $FIRST_USR_CPU_PCT_RAND_READ_BW%)" \
        "vs" \
        "$(commaize $SECOND_RAND_READ_BW) (sys/usr cpu: $SECOND_SYS_CPU_PCT_RAND_READ_BW% / $SECOND_USR_CPU_PCT_RAND_READ_BW%)" \
        ":" \
        "$CMP_RAND_READ_BW (sys/usr cpu: $CMP_SYS_CPU_PCT_RAND_READ_BW% / $CMP_USR_CPU_PCT_RAND_READ_BW%)" \
        "Random Write:" \
        "$(commaize $FIRST_RAND_WRITE_BW) (sys/usr cpu: $FIRST_SYS_CPU_PCT_RAND_WRITE_BW% / $FIRST_USR_CPU_PCT_RAND_WRITE_BW%)" \
        "vs" \
        "$(commaize $SECOND_RAND_WRITE_BW) (sys/usr cpu: $SECOND_SYS_CPU_PCT_RAND_WRITE_BW% / $SECOND_USR_CPU_PCT_RAND_WRITE_BW%)" \
        ":" \
        "$CMP_RAND_WRITE_BW (sys/usr cpu: $CMP_SYS_CPU_PCT_RAND_WRITE_BW% / $CMP_USR_CPU_PCT_RAND_WRITE_BW%)" \
        "Sequential Read:" \
        "$(commaize $FIRST_SEQ_READ_BW) (sys/usr cpu: $FIRST_SYS_CPU_PCT_SEQ_READ_BW% / $FIRST_USR_CPU_PCT_SEQ_READ_BW%)" \
        "vs" \
        "$(commaize $SECOND_SEQ_READ_BW) (sys/usr cpu: $SECOND_SYS_CPU_PCT_SEQ_READ_BW% / $SECOND_USR_CPU_PCT_SEQ_READ_BW%)" \
        ":" \
        "$CMP_SEQ_READ_BW (sys/usr cpu: $CMP_SYS_CPU_PCT_SEQ_READ_BW% / $CMP_USR_CPU_PCT_SEQ_READ_BW%)" \
        "Sequential Write:" \
        "$(commaize $FIRST_SEQ_WRITE_BW) (sys/usr cpu: $FIRST_SYS_CPU_PCT_SEQ_WRITE_BW% / $FIRST_USR_CPU_PCT_SEQ_WRITE_BW%)" \
        "vs" \
        "$(commaize $SECOND_SEQ_WRITE_BW) (sys/usr cpu: $SECOND_SYS_CPU_PCT_SEQ_WRITE_BW% / $SECOND_USR_CPU_PCT_SEQ_WRITE_BW%)" \
        ":" \
        "$CMP_SEQ_WRITE_BW (sys/usr cpu: $CMP_SYS_CPU_PCT_SEQ_WRITE_BW% / $CMP_USR_CPU_PCT_SEQ_WRITE_BW%)"
SUMMARY+=$cxt

printf -v cxt "Latency in ns\n$CMP_FMT$CMP_FMT$CMP_FMT$CMP_FMT\n" \
        "Random Rread:" \
        "$(commaize $FIRST_RAND_READ_LAT) (sys/usr cpu: $FIRST_SYS_CPU_PCT_RAND_READ_LAT% / $FIRST_USR_CPU_PCT_RAND_READ_LAT%)" \
        "vs" \
        "$(commaize $SECOND_RAND_READ_LAT) (sys/usr cpu: $SECOND_SYS_CPU_PCT_RAND_READ_LAT% / $SECOND_USR_CPU_PCT_RAND_READ_LAT%)" \
        ":" \
        "$CMP_RAND_READ_LAT (sys/usr cpu: $CMP_SYS_CPU_PCT_RAND_READ_LAT% / $CMP_USR_CPU_PCT_RAND_READ_LAT%)" \
        "Random Write:" \
        "$(commaize $FIRST_RAND_WRITE_LAT) (sys/usr cpu: $FIRST_SYS_CPU_PCT_RAND_WRITE_LAT% / $FIRST_USR_CPU_PCT_RAND_WRITE_LAT%)" \
        "vs" \
        "$(commaize $SECOND_RAND_WRITE_LAT) (sys/usr cpu: $SECOND_SYS_CPU_PCT_RAND_WRITE_LAT% / $SECOND_USR_CPU_PCT_RAND_WRITE_LAT%)" \
        ":" \
        "$CMP_RAND_WRITE_LAT (sys/usr cpu: $CMP_SYS_CPU_PCT_RAND_WRITE_LAT% / $CMP_USR_CPU_PCT_RAND_WRITE_LAT%)" \
        "Sequential Read:" \
        "$(commaize $FIRST_SEQ_READ_LAT) (sys/usr cpu: $FIRST_SYS_CPU_PCT_SEQ_READ_LAT% / $FIRST_USR_CPU_PCT_SEQ_READ_LAT%)" \
        "vs" \
        "$(commaize $SECOND_SEQ_READ_LAT) (sys/usr cpu: $SECOND_SYS_CPU_PCT_SEQ_READ_LAT% / $SECOND_USR_CPU_PCT_SEQ_READ_LAT%)" \
        ":" \
        "$CMP_SEQ_READ_LAT (sys/usr cpu: $CMP_SYS_CPU_PCT_SEQ_READ_LAT% / $CMP_USR_CPU_PCT_SEQ_READ_LAT%)" \
        "Sequential Write:" \
        "$(commaize $FIRST_SEQ_WRITE_LAT) (sys/usr cpu: $FIRST_SYS_CPU_PCT_SEQ_WRITE_LAT% / $FIRST_USR_CPU_PCT_SEQ_WRITE_LAT%)" \
        "vs" \
        "$(commaize $SECOND_SEQ_WRITE_LAT) (sys/usr cpu: $SECOND_SYS_CPU_PCT_SEQ_WRITE_LAT% / $SECOND_USR_CPU_PCT_SEQ_WRITE_LAT%)" \
        ":" \
        "$CMP_SEQ_WRITE_LAT (sys/usr cpu: $CMP_SYS_CPU_PCT_SEQ_WRITE_LAT% / $CMP_USR_CPU_PCT_SEQ_WRITE_LAT%)"
SUMMARY+=$cxt

echo "$SUMMARY" > $RESULT
cat $RESULT
